## $Id: free_types_cs.tmpl,v 1.4 2004-02-22 22:44:44 patrick Exp $
// Generated from \$Revision: 1.4 $ of \$RCSfile: free_types_cs.tmpl,v $
using System;
using System.Runtime.InteropServices;
#import TemplateHelpers
#import visitors
#def generateClass($className, $wrapperObj)
public sealed abstract class $className
{
#set $const_visitor = visitors.CSharpVariableVisitor()
#for $c in $wrapperObj.constants
#silent $c.accept($const_visitor)
   $c.visibility const $const_visitor.getUsage() $const_visitor.getName() = $const_visitor.getValue();
#end for
#del $const_visitor

#set $enum_visitor = visitors.CSharpVisitor()
#for $e in $wrapperObj.enums
#silent $e.accept($enum_visitor)
#set $enum_values = ["%s = %d" % (v, $e.values[v]) for v in $e.values.keys()]
#set $body = ', '.join($enum_values)
   public enum $enum_visitor.getRawName(False)
   {
      $body
   }

#end for
#del $enum_visitor
#for $f in $wrapperObj.funcs
#set $function_visitor = visitors.CSharpMethodVisitor()
#silent $f.accept($function_visitor)
#set $func_params = ', '.join($function_visitor.getParamTypeList())
   [DllImport("$bridge_name", CharSet = CharSet.Ansi)]
#if $f.result.must_marshal
#set $marshaler_name = $function_visitor.getReturnType() + 'Marshaler'
   [return : MarshalAs(UnmanagedType.CustomMarshaler,
                       MarshalTypeRef = typeof($marshaler_name))]
#end if
   $function_visitor.getPInvokeDecl();

   public static $function_visitor.getReturnType() ${f.name[0]}($func_params)
   {
## Pre-call parameter marshaling.
#for $pre_marshal in $function_visitor.getPreCallMarshalList()
      $pre_marshal;
#end for
#for $function_call_line in $function_visitor.getMethodCallLines()
      $function_call_line
#end for
## Post-call parameter marshaling.
#for $post_marshal in $function_visitor.getPostCallMarshalList()
      $post_marshal;
#end for
#if $function_visitor.returns()
      $function_visitor.getReturnStatement();
#end if
   }

#end for
}
#end def

namespace $module
{

## Begin the recursive process of exporting $exp_class.
$generateClass($class_name, $wrapper)

} // namespace $module
