## $Id: class_cs.tmpl,v 1.66 2004-01-17 16:45:54 patrick Exp $
// Generated from \$Revision: 1.66 $ of \$RCSfile: class_cs.tmpl,v $
using System;
using System.Runtime.InteropServices;
using System.Reflection;
#import TemplateHelpers
#import visitors

#def generateMethod($methodDecl, $hasBase, $sealed = False)
#set $method_visitor    = visitors.CSharpVisitor()
#set $pi_param_visitor  = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor     = visitors.CSharpParamVisitor()
#set $result_visitor    = visitors.CSharpReturnVisitor()
#set $dlg_param_visitor = visitors.CSharpDelegateParamVisitor()
#silent $methodDecl.accept($method_visitor)
#silent $methodDecl.result.accept($result_visitor)
#set $method_name = $methodDecl.name[0]
#set $method_params = ', '.join(['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $param_visitor), x[1]) for x in $methodDecl.parameters])
## If our class is sealed, we do not need to declare a delegate.
## If this method is virtual and not an override of a non-abstract method,
## then we need a delegate and member variable to hold the delegate.
## XXX: Can this expression be simplified?
#if not $sealed and (($methodDecl.virtual and not $methodDecl.override) or ($methodDecl.virtual and not $hasBase))
#set $delegate_name = TemplateHelpers.getDelegateName($methodDecl)
   // Delegate for the ${method_name}() callback.
## If the reutrn value on the delegate must be marshaled, define an adapter
## callback that will wrap the actual virtual function.
#if $methodDecl.result.must_marshal
#set $adapter_params = ', '.join([x[1] for x in $methodDecl.parameters])
   protected IntPtr ${method_name}Adapter($method_params)
   {
## XXX: See if we can take advantage of custom marshalers here.
      return ${method_name}($adapter_params).mRawObject;
   }

#set $return_type = 'IntPtr'
#else
#set $return_type = $result_visitor.getUsage()
#end if
## Build up the parameter list for the delegate.
#set $delegate_param_list = []
#for $param in $methodDecl.parameters
#silent $param[0].accept($dlg_param_visitor)
#if $dlg_param_visitor.mustMarshal()
#set $marshaler_name = $dlg_param_visitor.getUsage() + 'Marshaler'
#set $param_decl = '[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(%s))] %s %s' % ($marshaler_name, $dlg_param_visitor.getUsage(), $param[1])
#else
#set $param_decl = '%s %s' % ($dlg_param_visitor.getUsage(), $param[1])
#end if
#silent $delegate_param_list.append($param_decl)
#end for
#set $delegate_params = ',\n\t'.join($delegate_param_list)
   public delegate $return_type ${delegate_name}($delegate_params);
   protected $delegate_name m_${delegate_name};

#end if
## If this method is virtual and abstract, declare it as such.
#if $methodDecl.virtual and $methodDecl.abstract
   $methodDecl.visibility abstract $result_visitor.getUsage() ${method_name}($method_params);
## Otherwise, set up the P/Invoke information and the method body.
#else
#set $unsafe = False
#if $methodDecl.static
#set $pi_params = []
#set $pi_call_args = []
#else
#set $pi_params = ['IntPtr obj']
#set $pi_call_args = ['mRawObject']
#end if
#for $param in $methodDecl.parameters
#silent $param[0].accept($pi_param_visitor)
#if not $unsafe and $pi_param_visitor.needsUnsafe()
#set $unsafe = True
#end if
#silent $pi_params.append('%s %s' % ($pi_param_visitor.getUsage(), $param[1]))
#end for
#set $pi_name = $method_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$module", CharSet = CharSet.Ansi)]
#if $methodDecl.result.must_marshal
#set $marshaler_name = $result_visitor.getUsage() + 'Marshaler'
   [return : MarshalAs(UnmanagedType.CustomMarshaler,
                       MarshalTypeRef = typeof($marshaler_name))]
#end if
   private #if $unsafe then 'unsafe ' else ''#extern static $result_visitor.getUsage() ${pi_name}($pi_p);

#if $methodDecl.virtual
## If we are overriding a method but do not have a base class, then the method
## comes from an interface we are implementing.  In that case, it needs to be
## virtual.
#if $methodDecl.override and $hasBase
#set $method_type = 'override'
#else
#set $method_type = 'virtual'
#end if
#elif $methodDecl.static
#set $method_type = 'static'
#if $methodDecl.override
#set $method_type = 'new ' + $method_type
#end if
#else
#set $method_type = ''
#end if
   $methodDecl.visibility $method_type $result_visitor.getUsage() ${method_name}($method_params)
   {
## Pre-call parameter marshaling.
#for $param in $methodDecl.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
#if not $unsafe and $param_visitor.needsUnsafe()
#set $unsafe = True
#end if
      $param_visitor.getPreCallMarshal()
#silent $pi_call_args.append($param_visitor.getMarshalParamName())
#else
#silent $pi_call_args.append($param[1])
#end if
#end for
#set $arg_list = ', '.join($pi_call_args)
#set $returns = $result_visitor.getRawName() != 'void'
#if $returns
      $result_visitor.getUsage() result;
#end if
#set $method_call = $pi_name + '(' + $arg_list + ')'
## Keep the "unsafe" block wrapped tightly around the P/Invoke call.
#if $unsafe
      unsafe
      {
#end if
      #if $returns then 'result = ' else ''#$method_call;
#if $unsafe
      }
#end if
## Post-call parameter marshaling.
#for $param in $methodDecl.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal()
#end if
#end for
#if $returns
      return result;
#end if
   }
#end if
#end def

#def generateClass($classObj)
#set $bases = []
#set $has_base_class = False
#set $class_visitor = visitors.CSharpVisitor()
#set $base_visitor = visitors.CSharpVisitor()
#set $generic_visitor = visitors.CSharpVisitor()
#silent $classObj.class_.accept($class_visitor)
#for $b in $classObj.bases
#silent $b.accept($base_visitor)
#silent $bases.append($base_visitor.getRawName())
#if not $has_base_class and not $b.class_decl.isInterface()
#set $has_base_class = True
#end if
#end for
#set $b = ', '.join($bases)
public #slurp
#if $classObj.class_.abstract
abstract #slurp
#elif $classObj.info.sealed
sealed #slurp
#end if
#set $has_virtuals = $classObj.hasVirtualMethods()
class $class_visitor.getRawName(False)
#if $b
   : $b
#end if
{
## If we have a base class, it will hold mRawObject.
#if not $has_base_class
   protected internal IntPtr mRawObject = IntPtr.Zero;
   protected bool mWeOwnMemory = false;
   protected class NoInitTag {}

   internal IntPtr RawObject
   {
      get { return mRawObject; }
   }

#end if
## Do not define constructors if this class is abstract or it appears only as
## as smart pointer.
#set $delegate_args = []
#if $has_virtuals
   private void allocDelegates()
   {
#for $m in $classObj.virtual_methods
#set $callback_name = $m.name[0]
#if $m.result.must_marshal
#set $callback_name = $callback_name + 'Adapter'
#end if
#set $delegate_type = TemplateHelpers.getDelegateName($m)
      m_$delegate_type = new ${delegate_type}($callback_name);
#silent $delegate_args.append('m_' + $delegate_type)
#end for
   }
## Add the inherited delegates to $delegate_args.
#for $m in $classObj.inherited_virtual_methods
#set $delegate_name = TemplateHelpers.getDelegateName($m)
#silent $delegate_args.append('m_' + $delegate_name)
#end for

#end if
   // Constructors.
## Allocate a special protected constructor that will only allocate the
## delegate data members--if there are any.  This is critical in making
## inheritance from C++ work correctly.
   protected ${class_visitor.getRawName(False)}(NoInitTag doInit)
#if $has_base_class
      : base(doInit)
#end if
   {
#if $has_virtuals
      allocDelegates();
#end if
   }

#set $method_visitor   = visitors.CSharpVisitor()
#set $pi_param_visitor = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor    = visitors.CSharpParamVisitor()
#for $c in $classObj.constructors
#silent $c.accept($method_visitor)
#set $cons_name = $method_visitor.getGenericName()
#set $pi_params = ['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $pi_param_visitor), x[1]) for x in $c.parameters]
#set $cons_params = ', '.join(['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $param_visitor), x[1]) for x in $c.parameters])
## No need to add delegate parameters to a copy constructor.
#if not $c.IsCopy()
## Add the delegates to the P/Invoke function call parameter list.
#for $j in range(len($classObj.virtual_methods))
#set $m = $classObj.virtual_methods[$j]
#set $delegate_name = TemplateHelpers.getDelegateName($m)
#silent $pi_params.append('[MarshalAs(UnmanagedType.FunctionPtr)] ' + $delegate_name + ' d' + str($j))
#end for
## Add the inherited delegates to the P/Invoke function call parameter list.
#for $j in range(len($classObj.inherited_virtual_methods))
#set $m = $classObj.inherited_virtual_methods[$j]
#set $delegate_name = TemplateHelpers.getDelegateName($m)
#silent $pi_params.append('[MarshalAs(UnmanagedType.FunctionPtr)] ' + $delegate_name + ' d' + str($j + len($classObj.virtual_methods)))
#end for
#end if
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static IntPtr ${cons_name}($pi_p);

   $c.visibility ${class_visitor.getRawName(False)}($cons_params)
#if $has_base_class
      : base(new NoInitTag())   // Do not initialize mRawObject in base class
#end if
   {
#if $has_virtuals and not $c.IsCopy()
      allocDelegates();
#end if
#set $cons_args = []
## Pre-call parameter marshaling.
#for $param in $c.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPreCallMarshal()
#silent $cons_args.append($param_visitor.getMarshalParamName())
#else
#silent $cons_args.append($param[1])
#end if
#end for
#if not $c.IsCopy()
#silent $cons_args += $delegate_args
#end if
#set $arg_list = ', '.join($cons_args)
      mRawObject   = ${cons_name}($arg_list);
      mWeOwnMemory = true;
## Post-call parameter marshaling.
#for $param in $c.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal()
#end if
#end for
   }

#end for
   // Internal constructor needed for marshaling purposes.
   internal ${class_visitor.getRawName(False)}(IntPtr instPtr, bool ownMemory)
#if $has_base_class
      : base(new NoInitTag())
#end if
   {
      mRawObject   = instPtr;
      mWeOwnMemory = ownMemory;
   }

#set $delete_func = 'delete_' + $class_visitor.getGenericName()
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static void ${delete_func}(IntPtr obj);

   // Destructor.
   ~${class_visitor.getRawName(False)}()
   {
      if ( mWeOwnMemory && IntPtr.Zero != mRawObject )
      {
         ${delete_func}(mRawObject);
         mWeOwnMemory = false;
         mRawObject   = IntPtr.Zero;
      }
   }

## ---------------------------- Operator overloads ----------------------------
   // Operator overloads.

#if $classObj.overloadsEquality()
   public override bool Equals(object obj)
   {
      if ( ! (obj is $class_visitor.getUsage()) )
      {
         return false;
      }
      return this == ($class_visitor.getUsage()) obj;
   }

#end if
#set $operator_visitor = visitors.CSharpVisitor()
#set $pi_param_visitor = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor    = visitors.CSharpParamVisitor()
#set $result_visitor   = visitors.CSharpReturnVisitor()
#for $o in $classObj.member_operators
#silent $o.accept($operator_visitor)
#silent $o.result.accept($result_visitor)
#set $method_name = 'operator' + $o.name[0]
#set $method_param_list = [$class_visitor.getUsage() + ' lhs']
#if len($o.parameters) > 0
#silent $o.parameters[0][0].accept($param_visitor)
#silent $method_param_list.append('%s rhs' % $param_visitor.getUsage())
#end if
#set $method_params = ', '.join($method_param_list)
## Set up the P/Invoke declaration.
#set $unsafe = False
## XXX: Figure out how to get the marshaling information for the first
## parameter.
##silent $classObj.class_.accept($pi_param_visitor)
##set $pi_params = [$pi_param_visitor_visitor.getUsage() + ' lhs']
##set $pi_call_args = ['lhs']
#set $pi_params = ['IntPtr lhs']
#set $pi_call_args = ['lhs.mRawObject']
#if len($o.parameters) > 0
#silent $o.parameters[0][0].accept($pi_param_visitor)
#set $unsafe = $pi_param_visitor.needsUnsafe()
#silent $pi_params.append('%s rhs' % $pi_param_visitor.getUsage())
#end if
#set $pi_name = $operator_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$module", CharSet = CharSet.Ansi)]
#if $o.result.must_marshal
#set $marshaler_name = $result_visitor.getUsage() + 'Marshaler'
   [return : MarshalAs(UnmanagedType.CustomMarshaler,
                       MarshalTypeRef = typeof($marshaler_name))]
#end if
   private #if $unsafe then 'unsafe ' else ''#extern static $result_visitor.getUsage() ${pi_name}($pi_p);

## Fill in the method body.
   $o.visibility #if $o.override then 'new ' else ''#static $result_visitor.getUsage() ${method_name}($method_params)
   {
## Pre-call parameter marshaling.
#if len($o.parameters) > 0
#silent $param_visitor.setParamName('rhs')
#silent $o.parameters[0][0].accept($param_visitor)
#if $param_visitor.mustMarshal()
#if not $unsafe and $param_visitor.needsUnsafe()
#set $unsafe = True
#end if
      $param_visitor.getPreCallMarshal()
#silent $pi_call_args.append($param_visitor.getMarshalParamName())
#else
#silent $pi_call_args.append('rhs')
#end if
#end if
#set $arg_list = ', '.join($pi_call_args)
#set $returns = $result_visitor.getRawName() != 'void'
#if $returns
      $result_visitor.getUsage() result;
#end if
#set $method_call = $pi_name + '(' + $arg_list + ')'
## Keep the "unsafe" block wrapped tightly around the P/Invoke call.
#if $unsafe
      unsafe
      {
#end if
      #if $returns then 'result = ' else ''#$method_call;
#if $unsafe
      }
#end if
## Post-call parameter marshaling.
#for $param in $o.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal()
#end if
#end for
#if $returns
      return result;
#end if
   }

#end for
#del $operator_visitor
## ---------------------------- Converter operators ---------------------------
   // Converter operators.
#set $operator_visitor = visitors.CSharpVisitor()
#set $pi_param_visitor = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor    = visitors.CSharpParamVisitor()
#set $result_visitor   = visitors.CSharpReturnVisitor()
#for $o in $classObj.converter_operators
#silent $o.accept($operator_visitor)
#silent $o.result.accept($result_visitor)
#set $pi_params = ['IntPtr selfObj']
#set $pi_call_args = ['obj.mRawObject']
#set $pi_name = $operator_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$module", CharSet = CharSet.Ansi)]
#if $o.result.must_marshal
#set $marshaler_name = $result_visitor.getUsage() + 'Marshaler'
   [return : MarshalAs(UnmanagedType.CustomMarshaler,
                       MarshalTypeRef = typeof($marshaler_name))]
#end if
   private extern static $result_visitor.getUsage() ${pi_name}($pi_p);

   $o.visibility #if $o.override then 'new ' else ''#static implicit operator ${result_visitor.getUsage()}($class_visitor.getRawName(False) obj)
   {
      return ${pi_name}(obj.mRawObject);
   }

#end for
#del $operator_visitor
## ---------------------------- Non-virtual methods ---------------------------
#if $classObj.hasNonVirtualMethods()

   // Start of non-virtual methods.
#for $m in $classObj.non_virtual_methods
$generateMethod($m, $has_base_class)
#end for
   // End of non-virtual methods.
#end if
## ------------------------------ Virtual methods -----------------------------
#if $has_virtuals

   // Start of virtual methods.
#for $m in $classObj.virtual_methods
$generateMethod($m, $has_base_class)
#end for
   // End of virtual methods.
#end if
## -------------------------- Sealed virtual methods --------------------------
#if $classObj.info.sealed

   // Start of virtual methods.
#for $m in $classObj.sealed_methods
$generateMethod($m, $has_base_class, True)
#end for
   // End of virtual methods.
#end if
## ------------------------------ Static methods ------------------------------
#if $classObj.hasStaticMethods()

   // Start of static methods.
#for $m in $classObj.static_methods
$generateMethod($m, $has_base_class)
#end for
   // End of static methods.
#end if
## ---------------------------- Static data members ---------------------------
#if $classObj.hasStaticData()

   // Start of static data.
#set $data_visitor = visitors.CSharpVisitor()
#set $data_type_visitor = visitors.CSharpVisitor()
#for $m in $classObj.static_members
#silent $m.accept($data_visitor)
#silent $m.type.accept($data_type_visitor)
#set $set_name = $data_visitor.getGenericName() + '_set'
#set $get_name = $data_visitor.getGenericName() + '_get'
#if $m.type.must_marshal
#set $native_type = 'IntPtr'
#else
#set $native_type = $data_type_visitor.getUsage()
#end if
   // Getter function for $data_visitor.getRawName()
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static $native_type ${get_name}();

#if not $m.type.const
   // Setter function for $data_visitor.getRawName()
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static void ${set_name}($native_type v);
#end if

   // Property for $data_visitor.getRawName()
   public static $data_type_visitor.getUsage() $m.name[0]
   {
#if $m.type.must_marshal
## XXX: Allocating a new object for every get() call seems wasteful.
      get { return new ${data_type_visitor.getUsage()}(${get_name}(), false); }
#if not $m.type.const
      set { ${set_name}(value.mRawObject); }
#end if
#else
      get { return ${get_name}(); }
#if not $m.type.const
      set { ${set_name}(value); }
#end if
#end if
   }

#end for
   // End of static data.
#end if

## ---------------------------- Nested enumerations ---------------------------
#set $nested_visitor = visitors.CSharpVisitor()
#for $ne in $classObj.nested_enums
#silent $ne.enum.accept($nested_visitor)
#set $enum_values = ["%s = %d" % (v, $ne.enum.values[v]) for v in $ne.enum.values.keys()]
#set $body = ', '.join($enum_values)
   // Nested enumeration $nested_visitor.getRawName().
   public enum $nested_visitor.getRawName(False)
   {
      $body
   };

#end for

#for $nc in $classObj.nested_classes
#silent $nc.class_.accept($nested_visitor)
   // Nested class $nested_visitor.getRawName().
#if $nc.isInterface()
$generateInterface($nc)
#else
$generateClass($nc)
#end if
#end for
} // class $class_visitor.getRawName()

$generateCustomMarshaler($classObj, False)
#end def

#def generateCustomMarshaler($classObj, $isInterface)
#set $class_visitor = visitors.CSharpVisitor()
#silent $classObj.class_.accept($class_visitor)
#set $custom_marshaler_name = $class_visitor.getRawName(False) + 'Marshaler'
/// <summary>
/// Custom marshaler for $class_visitor.getRawName().  Use this with P/Invoke
/// calls when a C# object of this type needs to be passed to native code or
/// vice versa.  Essentially, this marshaler hides the existence of mRawObject.
/// </summary>
public class $custom_marshaler_name : ICustomMarshaler
{
## To allow marshaling of abstract base types, define a dummy class that
## allows the raw pointer passed to MarshalNativeToManaged() to be used.
#if $isInterface or $classObj.class_.abstract
#set $dummy_name = 'Dummy' + $class_visitor.getRawName(False)
   private class $dummy_name : $class_visitor.getRawName()
   {
#if $isInterface
      protected internal IntPtr mRawObject = IntPtr.Zero;

      internal IntPtr RawObject
      {
         get { return mRawObject; }
      }
#end if

      public ${dummy_name}(IntPtr rawObject)
#if not $isInterface
         : base(new NoInitTag())
#end if
      {
         mRawObject = rawObject;
#if not $isInterface
         mWeOwnMemory = false;
#end if
      }

## Override abstract methods.
#for $m in $classObj.virtual_methods + $classObj.inherited_virtual_methods
#if $m.abstract
#set $method_visitor   = visitors.CSharpVisitor()
#set $pi_param_visitor = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor    = visitors.CSharpParamVisitor()
#set $result_visitor   = visitors.CSharpReturnVisitor()
#silent $m.accept($method_visitor)
#silent $m.result.accept($result_visitor)
#set $method_name = $m.name[0]
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $param_visitor), x[1]) for x in $m.parameters])
## Set up the P/Invoke information and the method body.
#set $unsafe = False
#set $pi_params = ['IntPtr obj']
#for $param in $m.parameters
#silent $param[0].accept($pi_param_visitor)
#if not $unsafe and $pi_param_visitor.needsUnsafe()
#set $unsafe = True
#end if
#silent $pi_params.append('%s %s' % ($pi_param_visitor.getUsage(), $param[1]))
#end for
#set $pi_name = $method_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
      [DllImport("$module", CharSet = CharSet.Ansi)]
#if $m.result.must_marshal
#set $marshaler_name = $result_visitor.getUsage() + 'Marshaler'
      [return : MarshalAs(UnmanagedType.CustomMarshaler,
                          MarshalTypeRef = typeof($marshaler_name))]
#end if
      private #if $unsafe then 'unsafe ' else ''#extern static $result_visitor.getUsage() ${pi_name}($pi_p);

      $m.visibility #if $isInterface then '' else 'override '#$result_visitor.getUsage() ${method_name}($p)
      {
## Pre-call parameter marshaling.
#set $pi_call_args = ['mRawObject']
#for $param in $m.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
#if not $unsafe and $param_visitor.needsUnsafe()
#set $unsafe = True
#end if
         $param_visitor.getPreCallMarshal()
#silent $pi_call_args.append($param_visitor.getMarshalParamName())
#else
#silent $pi_call_args.append($param[1])
#end if
#end for
#set $arg_list = ', '.join($pi_call_args)
#set $returns = $result_visitor.getRawName() != 'void'
#if $returns
         $result_visitor.getUsage() result;
#end if
#set $method_call = $pi_name + '(' + $arg_list + ')'
## Keep the "unsafe" block wrapped tightly around the P/Invoke call.
#if $unsafe
         unsafe
         {
#end if
         #if $returns then 'result = ' else ''#$method_call;
#if $unsafe
         }
#end if
## Post-call parameter marshaling.
#for $param in $m.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
         $param_visitor.getPostCallMarshal()
#end if
#end for
#if $returns
         return result;
#end if
      }

#end if
#end for
   }

#end if
   public void CleanUpManagedData(Object obj)
   {
   }

   public void CleanUpNativeData(IntPtr nativeData)
   {
   }

   public int GetNativeDataSize()
   {
      return -1;
   }

   // Marshaling for managed data being passed to C++.
   public IntPtr MarshalManagedToNative(Object obj)
   {
#if $isInterface
      // Try the fast return method first.  If it fails, catch the exception
      // and use the slow technique instead.
      try
      {
         return (($dummy_name) obj).mRawObject;
      }
      catch(System.InvalidCastException ex)
      {
## XXX: I would prefer to simplify this to something that can query the field
## directly instead of requiring the existing of a property accessor.
## XXX: The performance of this could be horrible.
         PropertyInfo raw_obj_prop =
            obj.GetType().GetProperty("RawObject",
                                      BindingFlags.NonPublic | BindingFlags.Instance);
         if ( null != raw_obj_prop )
         {
            return (IntPtr) raw_obj_prop.GetValue(obj, null);
         }
      }

## XXX: Turn this into an exception or something ...
      // Marshaling failed.
      return IntPtr.Zero;
#else
      return (($class_visitor.getRawName()) obj).mRawObject;
#end if
   }

#if $classObj.info.smart_ptr
#set $holder_name = TemplateHelpers.getHolderName($class_visitor)
   [DllImport("$module")]
   private extern static IntPtr new_${holder_name}(IntPtr obj);

#end if
   // Marshaling for native memory coming from C++.
   public Object MarshalNativeToManaged(IntPtr nativeObj)
   {
#if $isInterface or $classObj.class_.abstract
      return new ${dummy_name}(nativeObj);
#else
#if $classObj.info.smart_ptr
#set $ptr_str = 'new_' + $holder_name + '(nativeObj)'
#else
#set $ptr_str = 'nativeObj'
#end if
      return new ${class_visitor.getRawName()}($ptr_str, false);
#end if
   }

   public static ICustomMarshaler GetInstance(string cookie)
   {
      return mInstance;
   }

   private static $custom_marshaler_name mInstance = new ${custom_marshaler_name}();
}
#end def

#def generateInterface($classObj)
#set $bases = []
#set $has_base = False
#set $class_visitor = visitors.CSharpVisitor()
#set $base_visitor = visitors.CSharpVisitor()
#set $generic_visitor = visitors.CSharpVisitor()
#silent $classObj.class_.accept($class_visitor)
#for $b in $classObj.bases
#silent $b.accept($base_visitor)
#silent $bases.append($base_visitor.getRawName())
#set $has_base = True
#end for
public interface $class_visitor.getRawName(False)
#if $has_base
#set $base_list = ', '.join($bases)
   : $base_list
#end if
{
## ------------------------------ Virtual methods -----------------------------
#set $method_visitor = visitors.CSharpVisitor()
#set $result_visitor = visitors.CSharpVisitor()
#for $m in $classObj.virtual_methods
#silent $m.accept($method_visitor)
#silent $m.result.accept($result_visitor)
#set $method_name = $m.name[0]
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $generic_visitor), x[1]) for x in $m.parameters])
   $result_visitor.getUsage() ${method_name}($p);

#end for
#del $method_visitor
#del $result_visitor
}

$generateCustomMarshaler($classObj, True)
#end def

#for $n in $exp_class.class_.namespace
namespace $n
{
#end for

## Begin the recursive process of exporting $exp_class.
#if $exp_class.isInterface()
$generateInterface($exp_class)
#else
$generateClass($exp_class)
#end if
#for $n in $exp_class.class_.namespace
} // namespace $n
#end for
