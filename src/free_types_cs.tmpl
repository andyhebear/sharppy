## $Id: free_types_cs.tmpl,v 1.3 2004-02-19 23:42:05 patrick Exp $
// Generated from \$Revision: 1.3 $ of \$RCSfile: free_types_cs.tmpl,v $
using System;
using System.Runtime.InteropServices;
#import TemplateHelpers
#import visitors
#def generateClass($className, $wrapperObj)
public sealed abstract class $className
{
#set $const_visitor = visitors.CSharpVariableVisitor()
#for $c in $wrapperObj.constants
#silent $c.accept($const_visitor)
   $c.visibility const $const_visitor.getUsage() $const_visitor.getName() = $const_visitor.getValue();
#end for
#del $const_visitor

#set $enum_visitor = visitors.CSharpVisitor()
#for $e in $wrapperObj.enums
#silent $e.accept($enum_visitor)
#set $enum_values = ["%s = %d" % (v, $e.values[v]) for v in $e.values.keys()]
#set $body = ', '.join($enum_values)
   public enum $enum_visitor.getRawName(False)
   {
      $body
   }

#end for
#del $enum_visitor
#set $function_visitor = visitors.CSharpVisitor()
#set $pi_param_visitor = visitors.CSharpPInvokeParamVisitor()
#set $param_visitor    = visitors.CSharpParamVisitor()
#set $result_visitor   = visitors.CSharpReturnVisitor()
#for $f in $wrapperObj.funcs
#silent $f.accept($function_visitor)
#silent $f.result.accept($result_visitor)
#set $func_params = ', '.join(['%s %s' % (TemplateHelpers.getDeclUsage(x[0], $param_visitor), x[1]) for x in $f.parameters])
#set $unsafe = False
#set $pi_params = []
#set $pi_call_args = []
#for $param in $f.parameters
#silent $param[0].accept($pi_param_visitor)
#if not $unsafe and $pi_param_visitor.needsUnsafe()
#set $unsafe = True
#end if
#silent $pi_params.append('%s %s' % ($pi_param_visitor.getUsage(), $param[1]))
#end for
#set $pi_name = $function_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$bridge_name", CharSet = CharSet.Ansi)]
#if $f.result.must_marshal
#set $marshaler_name = $result_visitor.getUsage() + 'Marshaler'
   [return : MarshalAs(UnmanagedType.CustomMarshaler,
                       MarshalTypeRef = typeof($marshaler_name))]
#end if
   private #if $unsafe then 'unsafe ' else ''#extern static $result_visitor.getUsage() ${pi_name}($pi_p);

#set $method_name = $f.name[0]
   public static $result_visitor.getUsage() ${method_name}($func_params)
   {
## Pre-call parameter marshaling.
#for $param in $f.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
#if not $unsafe and $param_visitor.needsUnsafe()
#set $unsafe = True
#end if
      $param_visitor.getPreCallMarshal()
#silent $pi_call_args.append($param_visitor.getMarshalParamName())
#else
#silent $pi_call_args.append($param[1])
#end if
#end for
#set $arg_list = ', '.join($pi_call_args)
#set $returns = $result_visitor.getRawName() != 'void'
#if $returns
      $result_visitor.getUsage() result;
#end if
#set $method_call = $pi_name + '(' + $arg_list + ')'
## Keep the "unsafe" block wrapped tightly around the P/Invoke call.
#if $unsafe
      unsafe
      {
#end if
      #if $returns then 'result = ' else ''#$method_call;
#if $unsafe
      }
#end if
## Post-call parameter marshaling.
#for $param in $f.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal()
#end if
#end for
#if $returns
      return result;
#end if
   }

#end for
#del $function_visitor
#del $pi_param_visitor
#del $param_visitor
#del $result_visitor
}
#end def

namespace $module
{

## Begin the recursive process of exporting $exp_class.
$generateClass($class_name, $wrapper)

} // namespace $module
