## $Id: class_cs.tmpl,v 1.32 2003-11-13 22:50:32 patrick Exp $

using System;
using System.Runtime.InteropServices;

#from TemplateHelpers import getDeclName, getDeclUsage, getDelegateName, getBridgeName
#from visitors import CSharpVisitor, CSharpPInvokeParamVisitor, CSharpParamVisitor, CSharpReturnVisitor

#set $marsharler_visitor = CSharpVisitor()
#for $m, $c in $marshalers
#silent $c.class_accept($marshaler_visitor)
// Marshaler for $marshaler_visitor.getRawName().
class $marshaler_visitor.getRawName()_Marshaler : ICustomMarshaler
{
}
#end for

#def generateMethod($methodDecl)
#set $method_visitor   = CSharpVisitor()
#set $pi_param_visitor = CSharpPInvokeParamVisitor()
#set $param_visitor    = CSharpParamVisitor()
#set $result_visitor   = CSharpReturnVisitor()
#silent $methodDecl.accept($method_visitor)
#silent $methodDecl.result.accept($result_visitor)
#set $method_name = $methodDecl.name[0]
#set $p = ', '.join(['%s %s' % (getDeclUsage(x[0], $param_visitor), x[1]) for x in $methodDecl.parameters])
## If this method is virtual and is not an override, declare the delegate type
## and member variable.
#if $methodDecl.virtual and not $methodDecl.override
#set $delegate_name = getDelegateName($methodDecl)
   // Delegate for the ${method_name}() callback.
   public delegate $result_visitor.getUsage() ${delegate_name}($p);
   protected $delegate_name m_${delegate_name};

#end if
## If this method is virtual and abstract, declare it as such.
#if $methodDecl.virtual and $methodDecl.abstract
   public abstract $result_visitor.getUsage() ${method_name}($p);
## Otherwise, set up the P/Invoke information and the method body.
#else
#if $methodDecl.result.must_marshal
#set $native_return_type = 'IntPtr'
#else
#set $native_return_type = $result_visitor.getUsage()
#end if
#set $unsafe = False
#if $methodDecl.static
#set $pi_params = []
#set $pi_call_args = []
#else
#set $pi_params = ['IntPtr obj']
#set $pi_call_args = ['mRawObject']
#end if
#for $param in $methodDecl.parameters
#silent $param[0].accept($pi_param_visitor)
#if not $unsafe and $pi_param_visitor.needsUnsafe()
#set $unsafe = True
#end if
#silent $pi_params.append('%s %s' % ($pi_param_visitor.getUsage(), $param[1]))
#end for
#set $pi_name = $method_visitor.getGenericName()
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("vpr_bridge", CharSet = CharSet.Ansi)]
   private #if $unsafe then 'unsafe ' else ''#extern static $native_return_type ${pi_name}($pi_p);

#if $methodDecl.virtual
#if $methodDecl.override
#set $method_type = 'override'
#else
#set $method_type = 'virtual'
#end if
#elif $methodDecl.static
#set $method_type = 'static'
#else
#set $method_type = ''
#end if
   public $method_type $result_visitor.getUsage() ${method_name}($p)
   {
## Pre-call parameter marshaling.
#for $param in $methodDecl.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
#if not $unsafe and $param_visitor.needsUnsafe()
#set $unsafe = True
#end if
      $param_visitor.getPreCallMarshal()
#silent $pi_call_args.append($param_visitor.getMarshalParamName())
#else
#silent $pi_call_args.append($param[1])
#end if
#end for
#set $arg_list = ', '.join($pi_call_args)
#set $returns = $result_visitor.getRawName() != 'void'
#if $returns
      $result_visitor.getUsage result;
#end if
#set $method_call = $pi_name + '(' + $arg_list + ')'
## Keep the "unsafe" block wrapped tightly around the P/Invoke call.
#if $unsafe
      unsafe
      {
#end if
#if $methodDecl.result.must_marshal
      result = new ${result_visitor.getUsage()}($method_call, true);
#else
      #if $returns then 'result = ' else ''#$method_call;
#end if
#if $unsafe
      }
#end if
## Post-call parameter marshaling.
#for $param in $methodDecl.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal()
#end if
#end for
#if $returns
      return result;
#end if
   }
#end if
#end def

#def generateClass($classObj)
#set $bases = []
#set $has_base = False
#set $class_visitor = CSharpVisitor()
#set $base_visitor = CSharpVisitor()
#set $generic_visitor = CSharpVisitor()
#silent $classObj.class_.accept($class_visitor)
#for $b in $classObj.bases
#silent $b.accept($base_visitor)
#silent $bases.append($base_visitor.getRawName())
#set $has_base = True
#end for
#if not $has_base
#silent bases.append('IDisposable')
#end if
#set $b = ', '.join($bases)
public #slurp
#if classObj.class_.abstract
abstract #slurp
#end if
class $class_visitor.getRawName(False) : $b
{
## If we have a base class, it will hold mRawObject.
#if not $has_base
   protected internal IntPtr mRawObject;
   protected bool mWeOwnMemory = false;
#end if

#set $method_visitor = CSharpVisitor()
#if not $classObj.class_.abstract
   // Constructors.
#set $cons_visitor = CSharpVisitor()
#for $c in $classObj.constructors
#silent $c.accept($method_visitor)
#set $cons_name = $method_visitor.getGenericName()
#set $pi_params = ['%s %s' % (getDeclUsage(x[0], $cons_visitor), x[1]) for x in $c.parameters]
#set $p = ', '.join($pi_params)
#if $classObj.hasVirtualMethods()
#for $j in range(len($classObj.virtual_methods))
#set $m = $classObj.virtual_methods[$j]
#set $delegate_name = getDelegateName($m)
#silent $pi_params.append('[MarshalAs(UnmanagedType.FunctionPtr)] ' + $delegate_name + ' d' + str($j))
#end for
#end if
#set $pi_p = ',\n\t'.join($pi_params)
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static IntPtr ${cons_name}($pi_p);

#set $cons_args = [x[1] for x in $c.parameters]
   public ${class_visitor.getRawName(False)}($p)
   {
#if $classObj.hasVirtualMethods()
#for $m in $classObj.virtual_methods
#set $delegate_name = getDelegateName($m)
      m_$delegate_name = new ${delegate_name}($m.name[0]);
#silent $cons_args.append('m_' + $delegate_name)
#end for
#end if
#set $arg_list = ', '.join($cons_args)
      mRawObject   = ${cons_name}($arg_list);
      mWeOwnMemory = true;
   }

#end for
   // Internal constructor needed for marshaling purposes.
   internal ${class_visitor.getRawName(False)}(IntPtr instPtr, bool ownMemory)
   {
      mRawObject   = instPtr;
      mWeOwnMemory = ownMemory;
   }

#end if
## If we have a base class, we let it worry about this stuff.
#if not $has_base
   // Destructor.
   public void Dispose()
   {
      delete();
   }

#if $classObj.hasVirtualMethods()
#set $bridge_name = getBridgeName($class_visitor)
#else
#set $bridge_name = $class_visitor.getGenericName()
#end if
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static void delete_${bridge_name}(IntPtr obj);

   protected void delete()
   {
      if ( mWeOwnMemory && IntPtr.Zero != mRawObject )
      {
         delete_${bridge_name}(mRawObject);
         mWeOwnMemory = false;
         mRawObject   = IntPtr.Zero;
      }
   }

#end if
   // Overloads.

#set $pi_param_visitor = CSharpPInvokeParamVisitor()
#set $param_visitor    = CSharpParamVisitor()
#set $result_visitor   = CSharpReturnVisitor()
## ---------------------------- Non-virtual methods ---------------------------
#if $classObj.hasNonVirtualMethods()

   // Start of non-virtual methods.
#for $m in $classObj.non_virtual_methods
$generateMethod($m)
#end for
   // End of non-virtual methods.
#end if
## ------------------------------ Virtual methods -----------------------------
#if $classObj.hasVirtualMethods()

   // Start of virtual methods.
#for $m in $classObj.virtual_methods
$generateMethod($m)
#end for
   // End of virtual methods.
#end if
## ------------------------------ Static methods ------------------------------
#if $classObj.hasStaticMethods()

   // Start of static methods.
#for $m in $classObj.static_methods
$generateMethod($m)
#end for
   // End of static methods.
#end if
## ---------------------------- Static data members ---------------------------
#if $classObj.hasStaticData()

   // Start of static data.
#set $data_visitor = CSharpVisitor()
#set $data_type_visitor = CSharpVisitor()
#for $m in $classObj.static_members
#silent $m.accept($data_visitor)
#silent $m.type.accept($data_type_visitor)
#set $set_name = $data_visitor.getGenericName() + '_set'
#set $get_name = $data_visitor.getGenericName() + '_get'
#if $m.type.must_marshal
#set $native_type = 'IntPtr'
#else
#set $native_type = $data_type_visitor.getUsage()
#end if
   // Getter function for $data_visitor.getRawName()
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static $native_type ${get_name}();

#if not $m.type.const
   // Setter function for $data_visitor.getRawName()
   [DllImport("$module", CharSet = CharSet.Ansi)]
   private extern static void ${set_name}($native_type v);
#end if

   // Property for $data_visitor.getRawName()
   public static $data_type_visitor.getUsage() $m.name[0]
   {
#if $m.type.must_marshal
## XXX: Allocating a new object for every get() call seems wasteful.
      get { return new ${data_type_visitor.getUsage()}(${get_name}(), false); }
#if not $m.type.const
      set { ${set_name}(value.mRawObject); }
#end if
#else
      get { return ${get_name}(); }
#if not $m.type.const
      set { ${set_name}(value); }
#end if
#end if
   }

#end for
   // End of static data.
#end if

## ---------------------------- Nested enumerations ---------------------------
#set $nested_visitor = CSharpVisitor()
#for $ne in $classObj.nested_enums
#silent $ne.enum.accept($nested_visitor)
#set $enum_values = ["%s = %d" % (v, $ne.enum.values[v]) for v in $ne.enum.values.keys()]
#set $body = ', '.join($enum_values)
   // Nested enumeration $nested_visitor.getRawName().
   public enum $nested_visitor.getRawName(False)
   {
      $body
   };
#end for

#for $nc in $classObj.nested_classes
#silent $nc.class_.accept($nested_visitor)
   // Nested class $nested_visitor.getRawName().
#if $nc.isInterface()
$generateInterface($nc)
#else
$generateClass($nc)
#end if
#end for
} // class $class_visitor.getRawName()

#if not $classObj.class_.abstract
#set $marshaler_name = $class_visitor.getRawName(False) + 'Marshaler'
## XXX: Change this over to the C# documentation format.
// Custom marshaler for $class_visitor.getRawName().  Use this with P/Invoke
// calls when a C# object of this type needs to be passed to native code.
public class $marshaler_name : ICustomMarshaler
{
   public void CleanUpManagedData(Object obj)
   {
   }

   public void CleanUpNativeData(IntPtr nativeData)
   {
   }

   public int GetNativeDataSize()
   {
      return -1;
   }

   // Marshaling for managed data being passed to C++.
   public IntPtr MarshalManagedToNative(Object obj)
   {
      return (($class_visitor.getRawName()) obj).mRawObject;
   }

   // Marshaling for native memory coming from C++.
   public Object MarshalNativeToManaged(IntPtr nativeObj)
   {
## XXX: We cannot instantiate abstract types, but pointers to abstract types
## can be returned from C++.
      return new ${class_visitor.getRawName()}(nativeObj, false);
   }

   public static ICustomMarshaler GetInstance(string cookie)
   {
      return mInstance;
   }

   private static $marshaler_name mInstance = new ${marshaler_name}();
}
#end if
#end def

#def generateInterface($classObj)
#set $bases = []
#set $has_base = False
#set $class_visitor = CSharpVisitor()
#set $base_visitor = CSharpVisitor()
#set $generic_visitor = CSharpVisitor()
#silent $classObj.class_.accept($class_visitor)
#for $b in $classObj.bases
#silent $b.accept($base_visitor)
#silent $bases.append($base_visitor.getRawName())
#set $has_base = True
#end for
public interface $class_visitor.getRawName(False)
#if $has_base
#set $base_list = ', '.join($bases)
   : $base_list
#end if
{
## ------------------------------ Virtual methods -----------------------------
#if $classObj.hasVirtualMethods()
#set $method_visitor = CSharpVisitor()
#set $result_visitor = CSharpVisitor()
#for $m in $classObj.virtual_methods
#silent $m.accept($method_visitor)
#silent $m.result.accept($result_visitor)
#set $method_name = $m.name[0]
#set $p = ', '.join(['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $m.parameters])
   public $result_visitor.getUsage() ${method_name}($p);

#end for
#end if
}
#end def

#for $n in $exp_class.class_.namespace
namespace $n
{
#end for

## Begin the recursive process of exporting $exp_class.
#if $exp_class.isInterface()
$generateInterface($exp_class)
#else
$generateClass($exp_class)
#end if
#for $n in $exp_class.class_.namespace
} // namespace $n
#end for
