## $Id: class_cxx.tmpl,v 1.27 2003-11-12 19:43:22 patrick Exp $

#from TemplateHelpers import makeCPlusPlusTypedef, getDeclName, getCallbackName
#from visitors import CPlusPlusVisitor, CPlusPlusReturnVisitor, CPlusPlusParamVisitor

#def fillMethodWrapperBody($methodDecl, $returnVisitor, $methodCall)
#set $param_visitor  = CPlusPlusParamVisitor()
   {
## Pre-call parameter marshaling.
#set $all_args = []
#for $param in $methodDecl.parameters
#silent $param_visitor.setParamName($param[1])
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPreCallMarshal(); // Pre-call marshaling for $param[1]
#silent $all_args.append($param_visitor.getMarshalParamName())
#else
#silent $all_args.append($param[1])
#end if
#end for
#set $arg_list = ', '.join($all_args)
#set $returns = $returnVisitor.getRawName() != 'void'
#if $returns
      $returnVisitor.getUsage() result;
#end if
#set $method_call = $methodCall + '(' + $arg_list + ')'
## Return value marshaling.
#if $methodDecl.result.must_marshal
      result = new ${returnVisitor.getRawName()}($method_call);
#else
      #if $returns then 'result = ' else ''#$method_call;
#end if
## Post-call parameter marshaling.
#for $param in $methodDecl.parameters
#silent $param[0].accept($param_visitor)
#if $param_visitor.mustMarshal()
      $param_visitor.getPostCallMarshal(); // Post-call marshaling for $param[1]
#end if
#end for
#if $returns
      return result;
#end if
   }
#end def

#def exportClass($classObj)
#set $class_visitor = CPlusPlusVisitor()
#set $generic_visitor = CPlusPlusVisitor()
#set $param_visitor = CPlusPlusParamVisitor()
#silent $classObj.class_.accept($class_visitor)
#set $class_name = $class_visitor.getRawName()
\#include "sharppy.h"
#for $i in $classObj.includes
\#include <$i>
#end for

#if $classObj.hasVirtualMethods()
#set $class_name = $classObj.bridge_name
#set $class_id   = $class_name
#set $base_list = ['public %s' % x for x in $classObj.bridge_bases]
#set $bases = ', '.join($base_list)
class SHARPPY_API $classObj.bridge_name : $bases
{
public:
#for $c in $classObj.constructors
#set $p = ', '.join(['%s %s' % (getDeclName(x[0], $generic_visitor), x[1]) for x in $c.parameters])
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
   ${classObj.bridge_name}($p)
      : ${classObj.bridge_bases[0]}($arg_list)
   {;}

#end for
   virtual ~${classObj.bridge_name}()
   {;}

#set $return_visitor = CPlusPlusVisitor()
#for $m in $classObj.virtual_methods
#set $callback_name = getCallbackName($m)
   $makeCPlusPlusTypedef($m);
   ${callback_name}_t $callback_name;

#silent $m.result.accept($return_visitor)
#set $p = ', '.join(['%s %s' % (getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   virtual $return_visitor.getRawName() ${m.name[0]}($p)
   {
      #if $return_visitor.getRawName() != 'void' then 'return' else ''# ${getCallbackName($m)}($arg_list);
   }

#end for
}; // class $classObj.bridge_name
#else
#set $class_name = $class_visitor.getRawName()
#set $class_id   = $class_visitor.getGenericName()
#end if

extern "C"
{
#set $method_visitor = CPlusPlusVisitor()
#for $c in $classObj.constructors
#silent $c.accept($method_visitor)
#set $cons_name = $method_visitor.getGenericName()
#if $c.IsCopy()
   // Copy constructor wrapper.
   SHARPPY_API $class_visitor.getRawName()* ${cons_name}(const ${class_name}* p)
#else
#set $param_list = ['%s %s' % (getDeclUsage(x[0], $param_visitor), x[1]) for x in $c.parameters]
#for $j in range(len($classObj.virtual_methods))
#set $q = '%s::%s_t cb%s' % ($class_name, getCallbackName($classObj.virtual_methods[$j]), $j)
#silent $param_list.append($q)
#end for
#set $p = ', '.join($param_list)
   // Constructor wrapper.
   SHARPPY_API $class_visitor.getRawName()* ${cons_name}($p)
#end if
   {
## XXX: Parameter marshaling is missing here.
#if $c.IsCopy()
      $class_name* obj = new ${class_name}(*p);
#for $m in $classObj.virtual_methods
#set $callback_name = getCallbackName($m)
      obj->$callback_name = p->$callback_name;
#end for
#else
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
      $class_name* obj = new ${class_name}($arg_list);
#for $count in range(len($classObj.virtual_methods))
#set $callback_name = getCallbackName($classObj.virtual_methods[$count])
      obj->$callback_name = cb$count;
#end for
#end if
      return ($class_visitor.getRawName()*) obj;
   }

#end for

#if $classObj.hasDestructor() or $classObj.hasVirtualMethods()
   SHARPPY_API void delete_${class_id}($class_visitor.getRawName()* self_)
   {
      delete self_;
   }

#end if

## ---------------------------- Non-virtual methods ---------------------------
#for $m in $classObj.non_virtual_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $param_visitor), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $class_visitor.getRawName()]
#set $p = ', '.join($params)
#set $return_visitor = CPlusPlusReturnVisitor()
#silent $m.result.accept($return_visitor)
#silent $m.accept($method_visitor)
   // Wrapper for non-virtual method ${method_visitor.getRawName()}()
   SHARPPY_API $return_visitor.getUsage() ${method_visitor.getGenericName()}($p)
#set $method_call = 'self_->' + $m.name[0]
$fillMethodWrapperBody($m, $return_visitor, $method_call)
#end for

## ------------------------------ Virtual methods -----------------------------
#set $method_visitor = CPlusPlusVisitor()
#set $return_visitor = CPlusPlusReturnVisitor()
#for $m in $classObj.virtual_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $param_visitor), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $class_visitor.getRawName()]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
#silent $m.accept($method_visitor)
#silent $m.result.accept($return_visitor)
   // Wrapper for virtual method ${method_visitor.getRawName()}()
   SHARPPY_API $return_visitor.getUsage() ${method_visitor.getGenericName()}($p)
#set $method_call = 'self_->' + $method_visitor.getRawName()
$fillMethodWrapperBody($m, $return_visitor, $method_call)
#end for

## ------------------------------ Static methods ------------------------------
#set $method_visitor = CPlusPlusVisitor()
#set $return_visitor = CPlusPlusReturnVisitor()
#for $m in $classObj.static_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $param_visitor), x[1]) for x in $m.parameters]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
#silent $m.accept($method_visitor)
#silent $m.result.accept($return_visitor)
   // Wrapper for static method ${method_visitor.getRawName()}()
   SHARPPY_API $return_visitor.getUsage() ${method_visitor.getGenericName()}($p)
$fillMethodWrapperBody($m, $return_visitor, $method_visitor.getRawName())
#end for

## ---------------------------- Static data members ---------------------------
#set $data_visitor = CPlusPlusVisitor()
#set $data_type_visitor = CPlusPlusVisitor()
#for $m in $classObj.static_members
#silent $m.accept($data_visitor)
#silent $m.type.accept($data_type_visitor)
#set $set_name = $data_visitor.getGenericName() + '_set'
#set $get_name = $data_visitor.getGenericName() + '_get'
#if $m.type.must_marshal
#set $native_type = '%s*' % $data_type_visitor.getRawName()
#else
#set $native_type = $data_type_visitor.getRawName()
#end if
   // Wrapper for reading static data member $data_visitor.getRawName()
   SHARPPY_API $native_type ${get_name}()
   {
#if $m.type.must_marshal
## XXX: This probably isn't even close to correct ...
      return &$class_visitor.getRawName()::$m.name[0];
#else
      return $class_visitor.getRawName()::$m.name[0];
#end if
   }

#if not $m.type.const
   // Wrapper for modifying static data member $data_visitor.getRawName()
   SHARPPY_API void ${set_name}($native_type v)
   {
#if $m.type.must_marshal
## XXX: This probably isn't even close to correct ...
      $class_visitor.getRawName()::$m.name[0] = *v;
#else
      $class_visitor.getRawName()::$m.name[0] = v;
#end if
   }
#end if

#end for
} // extern "C" for $class_visitor.getRawName()

#set $nested_visitor = CPlusPlusVisitor()
#for $nc in $classObj.nested_classes
#silent $nc.class_.accept($nested_visitor)
// Nested class $nested_visitor.getRawName().
$exportClass($nc)
#end for
#end def

$exportClass($exp_class)
