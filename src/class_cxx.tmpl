// Generated from \$Revision: 1.64 $ of \$RCSfile: class_cxx.tmpl,v $
#import TemplateHelpers
#import visitors

#def fillMethodWrapperBody($methodDecl, $methodCall, $classObj = None, $className = None)
#for $i in range($methodDecl.MinArgs(), $methodDecl.MaxArgs() + 1)
#set $method_visitor = visitors.CPlusPlusFunctionWrapperVisitor()
#silent $method_visitor.setParamCount($i)
#silent $method_visitor.setClassInfo($classObj, $className)
#silent $method_visitor.setCall($methodCall)
#silent $methodDecl.accept($method_visitor)
#set $params = ', '.join($method_visitor.getParamTypeList())
   // Wrapper for $method_visitor.getKind() method ${method_visitor.getRawName()}()
   SHARPPY_API $method_visitor.getReturnType() ${method_visitor.getGenericName()}($params)
   {
## Pre-call parameter marshaling.
#for $pre_marshal in $method_visitor.getPreCallMarshalList()
      $pre_marshal
#end for
#for $method_call_line in $method_visitor.getCallLines()
      $method_call_line
#end for
## Post-call parameter marshaling.
#for $post_marshal in $method_visitor.getPostCallMarshalList()
      $post_marshal
#end for
#if $method_visitor.returns()
      $method_visitor.getReturnStatement()
#end if
   }

#end for
#del $method_visitor
#end def

#def exportClass($classObj)
#set $class_visitor = visitors.CPlusPlusVisitor()
#set $generic_visitor = visitors.CPlusPlusVisitor()
#set $param_visitor = visitors.CPlusPlusParamVisitor()
#silent $classObj.class_.accept($class_visitor)
#set $class_id = $class_visitor.getGenericName()
#if $classObj.needsAdapter()
#set $class_name = TemplateHelpers.getAdapterName($class_visitor)
#else
#set $class_name = $class_visitor.getRawName()
#end if
extern "C"
{
#set $method_visitor = visitors.CPlusPlusVisitor()
## Determine the object type that will be returned by the constructor(s).  This
## is the type that must be passed into the destructor wrapper--if one will be
## generated.
#if len($classObj.constructors) > 0
#set $cons_visitor = visitors.CPlusPlusConstructorWrapperVisitor()
#set $c = $classObj.constructors[0]
#silent $cons_visitor.setClassInfo($classObj, $class_visitor.getRawName(), $class_name)
#silent $c.accept($cons_visitor)
#set $obj_type = $cons_visitor.getReturnType()
#del $cons_visitor
#else
#set $obj_type = $class_name + '*'
#end if
## Iterate over the constructors and create wrapper functions for each.
#for $c in $classObj.constructors
#for $i in range($c.MinArgs(), $c.MaxArgs() + 1)
#set $cons_visitor = visitors.CPlusPlusConstructorWrapperVisitor()
#silent $cons_visitor.setParamCount($i)
#silent $cons_visitor.setClassInfo($classObj, $class_visitor.getRawName(), $class_name)
#silent $c.accept($cons_visitor)
#set $params = ', '.join($cons_visitor.getParamTypeList())
   // Constructor wrapper.
   SHARPPY_API $cons_visitor.getReturnType() ${cons_visitor.getGenericName()}($params)
   {
#for $pre_marshal in $cons_visitor.getPreCallMarshalList()
      $pre_marshal
#end for
#for $method_call_line in $cons_visitor.getCallLines()
      $method_call_line
#end for
#for $post_marshal in $cons_visitor.getPostCallMarshalList()
      $post_marshal
#end for
## All constructors return the same thing.
      return obj;
   }

#del $cons_visitor
#end for
## End of constructor loop.
#end for
## Simple destructor wrapper.
#if $classObj.hasPublicDestructor()
   SHARPPY_API void delete_${class_id}($obj_type self_)
   {
      delete self_;
   }

#end if
## ---------------------------- Non-virtual methods ---------------------------
#for $m in $classObj.non_virtual_methods
$fillMethodWrapperBody($m, $m.name[0], $classObj, $class_name)
#end for
## ------------------------------ Virtual methods -----------------------------
## XXX: Come up with a way to eliminate the use of a visitor here so that all
## of that is handled by fillMethodWrapperBody().
#set $method_visitor = visitors.CPlusPlusVisitor()
#for $m in $classObj.virtual_methods
## For abstract methods and protected virtual methods, the C wrapper needs to
## act more like a non-virtual.
#if $m.abstract
#set $method_call = $m.name[0]
#elif $m in $classObj.protected_virtual_methods
#set $method_call = $m.name[0] + '_wrapper'
#else
#silent $m.accept($method_visitor)
#set $method_call = $method_visitor.getRawName()
#end if
$fillMethodWrapperBody($m, $method_call, $classObj, $class_name)
#end for
## -------------------------- Sealed virtual methods --------------------------
#for $m in $classObj.sealed_methods
## For sealed virtual methods, the C wrapper needs to act like a non-virtual.
$fillMethodWrapperBody($m, $m.name[0], $classObj, $class_name)
#end for
## ------------------------------ Static methods ------------------------------
#for $m in $classObj.static_methods
#silent $m.accept($method_visitor)
$fillMethodWrapperBody($m, $method_visitor.getRawName())
#end for
## ---------------------------- Static data members ---------------------------
#set $data_visitor = visitors.CPlusPlusVisitor()
#set $data_type_visitor = visitors.CPlusPlusVisitor()
#for $m in $classObj.static_members
#silent $m.accept($data_visitor)
#silent $m.type.accept($data_type_visitor)
#set $set_name = $data_visitor.getGenericName() + '_set'
#set $get_name = $data_visitor.getGenericName() + '_get'
#if $m.type.must_marshal
#set $native_type = '%s*' % $data_type_visitor.getRawName()
#else
#set $native_type = $data_type_visitor.getRawName()
#end if
   // Wrapper for reading static data member $data_visitor.getRawName()
   SHARPPY_API $native_type ${get_name}()
   {
#if $m.type.must_marshal
## XXX: This probably isn't even close to correct ...
      return &$class_visitor.getRawName()::$m.name[0];
#else
      return $class_visitor.getRawName()::$m.name[0];
#end if
   }

#if not $m.type.const
   // Wrapper for modifying static data member $data_visitor.getRawName()
   SHARPPY_API void ${set_name}($native_type v)
   {
#if $m.type.must_marshal
## XXX: This probably isn't even close to correct ...
      $class_visitor.getRawName()::$m.name[0] = *v;
#else
      $class_visitor.getRawName()::$m.name[0] = v;
#end if
   }
#end if

#end for
## --------------------------- Converter operators ----------------------------
#set $return_visitor = visitors.CPlusPlusReturnVisitor()
#for $o in $classObj.converter_operators
#silent $o.result.accept($return_visitor)
#set $method_call = 'operator ' + $return_visitor.getRawName()
$fillMethodWrapperBody($o, $method_call, $classObj, $class_name)
#end for
#del $return_visitor
## ---------------------------- Operator overloads ----------------------------
#for $o in $classObj.member_operators
#set $method_call = 'operator' + $o.name[0]
$fillMethodWrapperBody($o, $method_call, $classObj, $class_name)
#end for
#for $o in $classObj.global_operators
#set $method_call = 'operator' + $o.name[0]
$fillMethodWrapperBody($o, $method_call)
#end for
} // extern "C" for $class_visitor.getRawName()

#set $nested_visitor = visitors.CPlusPlusVisitor()
#for $nc in $classObj.nested_classes
#silent $nc.class_.accept($nested_visitor)
// Nested class $nested_visitor.getRawName().
$exportClass($nc)
#end for
#end def

\#include "sharppy.h"
#for $i in $exp_class.includes
\#include <$i>
#end for

$exportClass($exp_class)
