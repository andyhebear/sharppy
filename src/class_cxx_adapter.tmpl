## $Id: class_cxx_adapter.tmpl,v 1.12 2004-01-12 19:44:04 patrick Exp $
// Generated from \$Revision: 1.12 $ of \$RCSfile: class_cxx_adapter.tmpl,v $
#import TemplateHelpers
#import visitors

#def exportClass($classObj)
#set $class_visitor = visitors.CPlusPlusVisitor()
#silent $classObj.class_.accept($class_visitor)
#set $class_name = TemplateHelpers.getAdapterName($class_visitor)
#set $wrapper_sym = '__%s__' % $class_name.upper()
#set $generic_visitor = visitors.CPlusPlusVisitor()
## Get the list of base classes (there will be at least one) for the adapter.
#set $base_list = ['public ' + $class_visitor.getRawName()]
class SHARPPY_API $class_name : #echo ', '.join($base_list)
{
public:
#for $c in $classObj.constructors
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclName(x[0], $generic_visitor), x[1]) for x in $c.parameters])
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
   ${class_name}($p)
      : ${class_visitor.getRawName()}($arg_list)
   {;}

#end for
   virtual ~${class_name}()
   {;}

#set $base_name = $class_visitor.getRawName()
#set $return_visitor = visitors.CPlusPlusReturnVisitor()
#for $m in $classObj.virtual_method_callbacks
#set $callback_name = TemplateHelpers.getCallbackName($m)
   $TemplateHelpers.makeCPlusPlusTypedef($m);
   ${callback_name}_t $callback_name;

#silent $m.result.accept($return_visitor)
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   /// Override for virtual function $m.FullName().
   virtual $return_visitor.getRawName() ${m.name[0]}($p)
   {
#set $returns = $return_visitor.getRawName() != 'void'
#set $call = '%s(%s)' % ($TemplateHelpers.getCallbackName($m), $arg_list)
#if $return_visitor.mustMarshal()
#set $call = '*(%s)' % $call
#end if
      #if $returns then 'return ' else ''#$call;
   }

#end for
#set $return_visitor = visitors.CPlusPlusReturnVisitor()
#for $m in $classObj.protected_virtual_methods
#silent $m.result.accept($return_visitor)
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   /// Public wrapper for protected virtual function $m.FullName().
   $return_visitor.getRawName() ${m.name[0]}_wrapper($p)
   {
#set $returns = $return_visitor.getRawName() != 'void'
#set $call = '%s::%s(%s)' % ($base_name, $m.name[0], $arg_list)
      #if $returns then 'return ' else ''#$call;
   }

#end for
#for $m in $classObj.protected_non_virtual_methods
#silent $m.result.accept($return_visitor)
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   /// Public wrapper for protected non-virtual function $m.FullName().
   $return_visitor.getRawName() ${m.name[0]}($p)
   {
#set $returns = $return_visitor.getRawName() != 'void'
#set $call = '%s::%s(%s)' % ($base_name, $m.name[0], $arg_list)
      #if $returns then 'return ' else ''#$call;
   }

#end for
#for $m in $classObj.protected_static_methods
#silent $m.result.accept($return_visitor)
#set $p = ', '.join(['%s %s' % (TemplateHelpers.getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   /// Public wrapper for protected static function $m.FullName().
   static $return_visitor.getRawName() ${m.name[0]}($p)
   {
#set $returns = $return_visitor.getRawName() != 'void'
#set $call = '%s::%s(%s)' % ($base_name, $m.name[0], $arg_list)
      #if $returns then 'return ' else ''#$call;
   }

#end for
}; // class $class_name

#set $nested_visitor = visitors.CPlusPlusVisitor()
#for $nc in $classObj.nested_classes
#if $nc.needsAdapter()
#silent $nc.class_.accept($nested_visitor)
// Nested class $nested_visitor.getRawName().
$exportClass($nc)
#end if
#end for

#end def

#set $class_visitor = visitors.CPlusPlusVisitor()
#silent $exp_class.class_.accept($class_visitor)
#set $wrapper_sym = '__%s__' % TemplateHelpers.getAdapterName($class_visitor).upper()
\#ifndef $wrapper_sym
\#define $wrapper_sym

\#include "sharppy.h"
#for $i in $includes
\#include <$i>
#end for
#del $class_visitor

$exportClass($exp_class)

\#endif
