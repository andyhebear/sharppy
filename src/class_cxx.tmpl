## $Id: class_cxx.tmpl,v 1.13 2003-11-01 23:24:42 patrick Exp $

\#include "sharppy.h"
#from TemplateHelpers import getCallbackTypedefName, makeCPlusPlusTypedef, getDeclName
#from visitors import CPlusPlusVisitor, CPlusPlusReturnVisitor

#def exportClass($classObj)
#set $class_visitor = CPlusPlusVisitor()
#set $generic_visitor = CPlusPlusVisitor()
#silent $classObj.class_.accept($class_visitor)
#set $class_name = $class_visitor.getRawName()
#for $i in $classObj.includes
\#include <$i>
#end for

#if $classObj.hasVirtualMethods()
#set $base_list = ['public %s' % getDeclName(x, $generic_visitor) for x in $classObj.bases]
#set $bases = ', '.join($base_list)
class SHARPPY_API $classObj.bridge_name : $bases
{
public:
#for $c in $classObj.constructors

#set $p = ', '.join(['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $c.parameters])
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
#silent $classObj.bases[0].accept($generic_visitor)
#set $base_cons = $generic_visitor.getRawName()
   ${classObj.bridge_name}($p)
      : ${base_cons}($arg_list)
   {;}
#end for

   virtual ~${classObj.bridge_name}()
   {;}

#for $m in $classObj.virtual_methods

   $makeCPlusPlusTypedef($m.callback);
   $getCallbackTypedefName($m.callback) ${m.name[0]}_callback;

#set $p = ', '.join(['%s %s' % (getDeclName(x[0], $generic_visitor), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   virtual $getDeclName($m.result, $generic_visitor) ${m.name[0]}($p)
   {
#set $result_type = getDeclName($m.result, $generic_visitor)
      #if $result_type != 'void' then 'return' else ''# ${m.name[0]}_callback($arg_list);
   }
#end for
}; // class $classObj.bridge_name
#end if

extern "C"
{
#for $c in $classObj.constructors
#if $c.IsCopy()
   // Copy constructor wrapper.
   SHARPPY_API $class_name* new_${classObj.bridge_name}(const ${classObj.bridge_name}* p)
#else
#set $param_list = ['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $c.parameters]
#for $i in range(len($classObj.virtual_methods))
#set $q = '%s cb%s' % (getCallbackTypedefName($classObj.virtual_methods[$i].callback, True), $i)
#silent $param_list.append($q)
#end for
#set $p = ', '.join($param_list)
   // Constructor wrapper.
   SHARPPY_API $class_name* new_${classObj.bridge_name}($p)
#end if
   {
#if $c.IsCopy()
      $classObj.bridge_name* obj = new ${classObj.bridge_name}(*p);
#set $count = 0
#for $m in $classObj.virtual_methods
      obj->${m.name[0]}_callback = p->${m.name[0]}_callback;
#set $count = $count + 1
#end for
#else
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
      $classObj.bridge_name* obj = new ${classObj.bridge_name}($arg_list);
#set $count = 0
#for $m in $classObj.virtual_methods
      obj->${m.name[0]}_callback = cb$count;
#set $count = $count + 1
#end for
#end if
      return ($class_name*) obj;
   }

#end for

#if $classObj.hasDestructor() or $classObj.hasVirtualMethods()
   SHARPPY_API void delete_${classObj.bridge_name}($class_name* self_)
   {
      delete self_;
   }

#end if

#for $m in $classObj.non_virtual_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $class_name]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
#set $return_visitor = CPlusPlusReturnVisitor()
#silent $m.result.accept($return_visitor)
#silent $m.accept($generic_visitor)
   ## XXX: Need to handle marshaling the return type here.
   SHARPPY_API $return_visitor.getUsage() ${generic_visitor.getGenericName()}($p)
   {
#set $method_name = $m.name[0]
#if $return_visitor.getRawName() != 'void'
      return #slurp
#end if
#if $m.result.must_marshal
      new ${return_visitor.getRawName()}(self_->${generic_visitor.getGenericName()}($arg_list));
#else
      self_->${generic_visitor.getGenericName()}($arg_list);
#end if
   }

#end for

#for $m in $classObj.virtual_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $class_name]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
#set $method_visitor = CPlusPlusVisitor()
#set $return_visitor = CPlusPlusReturnVisitor()
#silent $m.accept($method_visitor)
#silent $m.result.accept($return_visitor)
   ## XXX: Need to handle marshaling the return type here.
   SHARPPY_API $return_visitor.getUsage() ${method_visitor.getGenericName()}($p)
   {
#set $method_name = $m.name[0]
#if $return_visitor.getRawName() != 'void'
      return #slurp
#end if
#if $m.result.must_marshal
      new ${return_visitor.getRawName()}(self_->${class_name}::${method_name}($arg_list));
#else
      self_->${class_name}::${method_name}($arg_list);
#end if
   }

#end for

#*
#for $m in $classObj.static_methods
#set $params = ['%s %s' % (getDeclUsage(x[0], $generic_visitor), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $class_name]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
#set $method_visitor = CPlusPlusVisitor()
#set $return_visitor = CPlusPlusReturnVisitor()
#silent $m.accept($method_visitor)
#silent $m.result.accept($return_visitor)
   ## XXX: Need to handle marshaling the return type here.
   SHARPPY_API $return_visitor.getUsage() ${method_visitor.getGenericName()}($p)
   {
#set $method_name = $m.name[0]
#if $return_visitor.getRawName() != 'void'
      return #slurp
#end if
#if $m.result.must_marshal
      new ${return_visitor.getRawName()}(${class_name}::${method_name}($arg_list));
#else
      ${class_name}::${method_name}($arg_list);
#end if
   }

#end for
*#
} // extern "C" for $class_visitor.getRawName()

#set $nested_visitor = CPlusPlusVisitor()
#for $nc in $classObj.nested_classes
#silent $nc.class_.accept($nested_visitor)
// Nested class $nested_visitor.getRawName().
$exportClass($nc)
#end for
#end def

$exportClass($exp_class)
