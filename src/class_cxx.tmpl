\#include "sharppy.h"
#from TemplateHelpers import getCPlusPlusName, getCallbackTypedefName, makeCPlusPlusTypedef

#def exportClass($classObj)
#for $i in $classObj.includes
\#include <$i>
#end for

#if $classObj.hasVirtualMethods()
#set $base_list = ['public %s' % getCPlusPlusName(x) for x in $classObj.bases]
#set $bases = ', '.join($base_list)
class SHARPPY_API $classObj.bridge_name : $bases
{
public:
#for $c in $classObj.constructors

#set $p = ', '.join(['%s %s' % (getCPlusPlusName(x[0]), x[1]) for x in $c.parameters])
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
#set $base_cons = getCPlusPlusName($classObj.bases[0])
   ${classObj.bridge_name}($p)
      : ${base_cons}($arg_list)
   {;}
#end for

   virtual ~${classObj.bridge_name}()
   {;}

#for $m in $classObj.virtual_methods

   $makeCPlusPlusTypedef($m.callback);
   $getCallbackTypedefName($m.callback) ${m.name[0]}_callback;

#set $p = ', '.join(['%s %s' % (getCPlusPlusName(x[0]), x[1]) for x in $m.parameters])
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   virtual $getCPlusPlusName($m.result) ${m.name[0]}($p)
   {
#set $result_type = getCPlusPlusName($m.result)
      #if $result_type != 'void' then 'return' else ''# ${m.name[0]}_callback($arg_list);
   }
#end for
};
#end if

extern "C"
{
#for $c in $classObj.constructors
#set $p = ', '.join(['%s %s' % (getCPlusPlusName(x[0]), x[1]) for x in $c.parameters])
   $classObj.getCPlusPlusName()* new_${classObj.bridge_name}($p
#for $i in range(len($classObj.virtual_methods))
#set $q = '%s cb%s' % (getCallbackTypedefName($classObj.virtual_methods[$i].callback, True), $i)
      , $q
#end for
      )
   {
#set $arg_list = ', '.join([x[1] for x in $c.parameters])
      $classObj.bridge_name* obj = new ${classObj.bridge_name}($arg_list);
#set $count = 0
#for $m in $classObj.virtual_methods
      obj->${m.name[0]}_callback = cb$count;
#set $count = $count + 1
#end for
      return ($classObj.getCPlusPlusName()*) obj;
   }

#end for

#if $classObj.hasDestructor() or $classObj.hasVirtualMethods()
   void delete_${classObj.bridge_name}($classObj.getCPlusPlusName()* self_)
   {
      delete self_;
   }

#end if

#for $m in $classObj.non_virtual_methods
#set $params = ['%s %s' % (getCPlusPlusName(x[0]), x[1]) for x in $m.parameters]
#silent $params[0:0] = ["%s* self_" % $classObj.getCPlusPlusName()]
#set $p = ', '.join($params)
#set $arg_list = ', '.join([x[1] for x in $m.parameters])
   ## XXX: Need to handle marshaling the return type here.
   $getCPlusPlusName($m.result) ${m.getGenericName()}($p)
   {
#if $getCPlusPlusName($m.result) != 'void'
#if $m.result.must_marshal
      return new ${getCPlusPlusName(m.result)}(self_->${m.getGenericName()}($arg_list));
#else
      return self_->${m.getGenericName()}($arg_list);
#end if
#else
      self_->${m.getGenericName()}($arg_list);
#end if
   }

#end for

#*
#for $m in $classObj.virtual_methods
   $m.result.marshal_type ${classObj.bridge_name}_${m.getGenericName()}($classObj.type* self_,
      ', '.join($m.parameters))
   {
#if $m.result != 'void'
#set $p = ', '.join(['::'.join(x[0].name) for x in $m.parameters])
#if $m.result.mustMarshal()
      return new ${m.result}(self_->$classObj.type::${m.getGenericName()}($p));
#else
      return self_->$classObj.type::${m.getGenericName()}(', '.join($p));
#end if
#else
      self_->$classObj.type::${m.getGenericName()}(', '.join($p));
#end if
   }

#end for

#for $m in $classObj.static_methods
   $m.result.marshal_type ${classObj.getGenericName()}_${m.getGenericName()}(', '.join($m.parameters))
   {
#if $m.result != 'void'
#set $p = ', '.join(['::'.join(x[0].name) for x in $m.parameters])
#if $m.result.must_marshal
      return new ${m.result}($classObj.type::${m.getGenericName()}($p));
#else
      return $classObj.type::${m.getGenericName()}(', '.join($p));
#end if
#else
      $classObj.type::${m.getGenericName()}(', '.join($p));
#end if
   }

#end for
*#
}

#for $nc in $classObj.nested_classes
// Nested class $nc.getCPlusPlusName().
$exportClass($nc)
#end for
#end def

$exportClass($exp_class)
